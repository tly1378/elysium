
#-*- coding: utf-8 -*-
'''
  <auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
  </auto-generated>
'''

from enum import Enum



class Dialogue :
    def __init__(self, _json_):
        self.group_id = _json_['group_id']
        self.id = _json_['id']
        self.text = _json_['text']
        self.actor = _json_['actor']
        self.selections = []
        for _ele0_ in _json_['selections']:
            _e0_ = dialogue_id(_ele0_)
            self.selections.append(_e0_)
        self.item_requirements = []
        for _ele0_ in _json_['item_requirements']:
            _e0_ = _ele0_
            self.item_requirements.append(_e0_)
        self.actions = []
        for _ele0_ in _json_['actions']:
            _e0_ = invoke(_ele0_)
            self.actions.append(_e0_)

class dialogue_id :
    def __init__(self, _json_):
        self.group_id = _json_['group_id']
        self.id = _json_['id']

class Global :
    def __init__(self, _json_):
        self.base_url = _json_['base_url']
        self.hub_port = _json_['hub_port']
        self.initial_dialogues = []
        for _ele0_ in _json_['initial_dialogues']:
            _e0_ = _ele0_
            self.initial_dialogues.append(_e0_)

class invoke :
    def __init__(self, _json_):
        self.f = _json_['f']
        self.p = _json_['p']


class TbGlobal:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = Global(_json_[0])

    def getData(self) : return self._data

    def invoke(self) : return self._data.invoke
    def invoke(self) : return self._data.invoke
    def invoke(self) : return self._data.invoke

class TbDialogue:
    
    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = Dialogue(_json2_)
            self._dataList.append(_v)
            self._dataMap[(_v.group_id, _v.id)] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, group_id, id) : return self._dataMap.get((group_id, id))




class cfg_Tables:
    def __init__(self, loader):
        self.TbGlobal = TbGlobal(loader('tbglobal')); 
        self.TbDialogue = TbDialogue(loader('tbdialogue')); 

